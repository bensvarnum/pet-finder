[{"/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/index.js":"1","/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/App.js":"2","/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/reportWebVitals.js":"3","/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/components/Landing.js":"4","/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/components/index.js":"5","/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/components/Navbar.jsx":"6","/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/components/PetForm.jsx":"7"},{"size":543,"mtime":1610495701956,"results":"8","hashOfConfig":"9"},{"size":383,"mtime":1610495701955,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610063938313,"results":"11","hashOfConfig":"9"},{"size":141,"mtime":1610063938312,"results":"12","hashOfConfig":"9"},{"size":92,"mtime":1610068387221,"results":"13","hashOfConfig":"9"},{"size":1491,"mtime":1610495712624,"results":"14","hashOfConfig":"9"},{"size":8083,"mtime":1610823821442,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1t4ibj7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/index.js",[],["34","35"],"/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/App.js",[],"/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/reportWebVitals.js",[],"/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/components/Landing.js",[],"/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/components/index.js",[],"/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/components/Navbar.jsx",["36","37","38","39"],"import React, { useState } from 'react';\nimport { Drawer, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nconst Navbar = () => {\n\n    const [visible, setVisible] = useState(false);\n\n    const showDrawer = () => {\n        setVisible(true);\n    }\n\n    const onClose = () => {\n        setVisible(false);\n    }\n\n    return (\n            <>\n            <div className=\"navbar\" id=\"navbar\">\n                <div className=\"logo\">\n                    <img className=\"logo-image\" src=\"./img/pets-logo.png\" />\n                </div>\n                <div className=\"nav-name\">\n                    <a className=\"lost\" href=\"#\">Lost Pets</a>\n                    <img className=\"center-logo\" src=\"./img/dog-bone-logo.png\" />\n                    <a className=\"found\" href=\"#\">Found Pets</a>\n                </div>\n                <div className=\"login-button\">\n                    <button className=\"ui button\" onClick={showDrawer}>Login</button>\n                </div>\n            </div>\n            <Drawer\n                title=\"Login\"\n                placement=\"right\"\n                closable={true}\n                onClose={onClose}\n                visible={visible}\n            >\n                <div className=\"login-btn-group\">\n                    <Button type=\"primary\">Facebook</Button>\n                    <Button type=\"primary\">Google</Button>\n                </div>\n            </Drawer>\n            </>\n        )\n}\n\nexport default Navbar;",["40","41"],"/Users/bens.varnum/repos/pet-finder/client/pet-finder/src/components/PetForm.jsx",["42","43","44"],"import React, { useState } from \"react\";\nimport { Button, Form, Segment } from \"semantic-ui-react\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport \"./PetForm.css\";\n\nfunction PetForm() {\n  const [petName, showPetName] = useState(false);\n  const [otherInput, showOtherInput] = useState(false);\n  const [petNameInput, setPetNameInput] = useState(\"\");\n  const [furColorChoice, setFurColorChoice] = useState(\"white\");\n  const [otherColor, setOtherColor] = useState(\"\");\n  const [petSize, setPetSize] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [image, setImage] = useState({ file: null });\n\n  const onHandleChange = (e) => {\n    setPetNameInput(e.target.value);\n  };\n\n  const handleImage = (e) => {\n    setImage({ file: e.target.files[0] });\n  };\n\n  const handleColorChoice = (e) => {\n    // const choice = e.target.value === \"other\" ? \"\" : e.target.value;\n\n    setFurColorChoice(e.target.value);\n  };\n\n  const otherColorChoice = (e) => {\n    setOtherColor(e.target.value);\n  };\n\n  const handleSizeChange = (e) => {\n    setPetSize(e.target.value);\n  };\n\n  const handleLocation = (value) => {\n    setLocation(value);\n  };\n\n  const handlePhoneNumber = (e) => {\n    setPhoneNumber(e.target.value);\n  };\n\n  const handleEmail = (e) => {\n    setEmail(e.target.value);\n  };\n  const handleNotes = (e) => {\n    setNotes(e.target.value);\n  };\n\n  const handleSelect = async (value) => {\n    setLocation(value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(image);\n    console.log(otherColor);\n    console.log(furColorChoice);\n  };\n\n  const lostToggler = () => {\n    showPetName(!petName);\n  };\n\n  const resetToggler = () => {\n    showPetName(false);\n  };\n\n  return (\n    <Segment color=\"blue\" inverted>\n      <div className=\"form\">\n        <div className=\"form__header\">\n          <h3>Lost or Found</h3>\n          <p>\n            Is your pet lost? Did you find someones pet and would like to find\n            the owner?\n          </p>\n        </div>\n        <div className=\"form__input\">\n          <Form onSubmit={handleSubmit} encType=\"multpart/form-data\" inverted>\n            <Form.Group>\n              <Form.Field\n                label=\"Lost\"\n                control=\"input\"\n                type=\"radio\"\n                name=\"htmlRadios\"\n                onClick={lostToggler}\n              />\n\n              <Form.Field\n                label=\"Found\"\n                control=\"input\"\n                type=\"radio\"\n                name=\"htmlRadios\"\n                onClick={resetToggler}\n              />\n            </Form.Group>\n            {petName && (\n              <Form.Group>\n                <Form.Input\n                  type=\"text\"\n                  label=\"Pets Name\"\n                  placeholder=\"Name of Pet\"\n                  value={petNameInput}\n                  onChange={onHandleChange}\n                />\n              </Form.Group>\n            )}\n            <Form.Group>\n              <Form.Field\n                label=\"Fur Color\"\n                control=\"select\"\n                value={furColorChoice}\n                onChange={handleColorChoice}\n              >\n                <option value=\"white\">White</option>\n                <option value=\"black\">Black</option>\n                <option value=\"brown\">Brown</option>\n                <option value=\"blonde\">Blonde</option>\n                <option value=\"other\">Other</option>\n              </Form.Field>\n\n              {furColorChoice !== \"white\" &&\n                furColorChoice !== \"black\" &&\n                furColorChoice !== \"brown\" &&\n                furColorChoice !== \"blonde\" && (\n                  <Form.Group>\n                    <Form.Input\n                      type=\"text\"\n                      label=\"Other Fur Color\"\n                      placeholder=\"Fur Color\"\n                      value={otherColor}\n                      // {furColorChoice === \"other\" ? \"\" : furColorChoice}\n                      onChange={otherColorChoice}\n                    />\n                  </Form.Group>\n                )}\n            </Form.Group>\n            <Form.Group inline>\n              <label>Size</label>\n              <Form.Field\n                control=\"input\"\n                label=\"Small\"\n                type=\"radio\"\n                name=\"htmlRadios\"\n                value=\"small\"\n                onChange={handleSizeChange}\n              />\n              <Form.Field\n                control=\"input\"\n                label=\"Medium\"\n                type=\"radio\"\n                name=\"htmlRadios\"\n                value=\"medium\"\n                onChange={handleSizeChange}\n              />\n              <Form.Field\n                control=\"input\"\n                label=\"Large\"\n                type=\"radio\"\n                name=\"htmlRadios\"\n                value=\"large\"\n                onChange={handleSizeChange}\n              />\n            </Form.Group>\n            <Form.Group>\n              <PlacesAutocomplete\n                value={location}\n                onChange={handleLocation}\n                onSelect={handleSelect}\n              >\n                {({\n                  getInputProps,\n                  suggestions,\n                  getSuggestionItemProps,\n                  loading,\n                }) => (\n                  <div>\n                    <Form.Input\n                      label=\"Location\"\n                      {...getInputProps({ placeholder: \"Enter Location\" })}\n                    />\n                    <div className=\"autocomplete-dropdown-container\">\n                      {loading ? <div>...loading</div> : null}\n                      {suggestions.map((suggestion, index) => {\n                        const className = suggestion.active\n                          ? \"suggestion-item--active\"\n                          : \"suggestion-item\";\n                        const style = suggestion.active\n                          ? { backgroundColor: \"#6b778d\", cursor: \"pointer\" }\n                          : { backgroundColor: \"#263859\", cursor: \"pointer\" };\n                        return (\n                          <div\n                            key={index}\n                            {...getSuggestionItemProps(suggestion, {\n                              className,\n                              style,\n                            })}\n                          >\n                            <span>{suggestion.description}</span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </PlacesAutocomplete>\n            </Form.Group>\n            <Form.Group>\n              <Form.Input\n                type=\"tel\"\n                label=\"Phone Number\"\n                placeholder=\"Phone Number\"\n                id=\"phone\"\n                name=\"phone\"\n                value={phoneNumber}\n                onChange={handlePhoneNumber}\n                pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{3}\"\n              />\n            </Form.Group>\n            <Form.Group>\n              <Form.Input\n                type=\"email\"\n                label=\"Email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={handleEmail}\n              />\n            </Form.Group>\n            <Form.TextArea\n              label=\"Area of Last Seen\"\n              placeholder=\"Give a description of where you found/lost the pet\"\n              rows=\"3\"\n              value={notes}\n              onChange={handleNotes}\n            />\n            <Form.Group>\n              <input\n                type=\"file\"\n                label=\"Upload Image\"\n                name=\"petImage\"\n                onChange={handleImage}\n              />\n            </Form.Group>\n            <Button type=\"submit\" value=\"submit\">\n              Submit\n            </Button>\n          </Form>\n        </div>\n      </div>\n    </Segment>\n  );\n}\n\nexport default PetForm;\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":22,"column":21,"nodeType":"51","endLine":22,"endColumn":77},{"ruleId":"52","severity":1,"message":"53","line":25,"column":21,"nodeType":"51","endLine":25,"endColumn":50},{"ruleId":"49","severity":1,"message":"50","line":26,"column":21,"nodeType":"51","endLine":26,"endColumn":82},{"ruleId":"52","severity":1,"message":"53","line":27,"column":21,"nodeType":"51","endLine":27,"endColumn":51},{"ruleId":"45","replacedBy":"54"},{"ruleId":"47","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":8,"column":10,"nodeType":"58","messageId":"59","endLine":8,"endColumn":20},{"ruleId":"56","severity":1,"message":"60","line":8,"column":22,"nodeType":"58","messageId":"59","endLine":8,"endColumn":36},{"ruleId":"56","severity":1,"message":"61","line":12,"column":10,"nodeType":"58","messageId":"59","endLine":12,"endColumn":17},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["62"],["63"],"no-unused-vars","'otherInput' is assigned a value but never used.","Identifier","unusedVar","'showOtherInput' is assigned a value but never used.","'petSize' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]